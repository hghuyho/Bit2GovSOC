package report

import (
	"Bit2GovSOC/client"
	"archive/zip"
	"encoding/csv"
	"fmt"
	"github.com/gocarina/gocsv"
	"github.com/rs/zerolog/log"
	"io"
	"strings"
)

type Malware struct {
	EndpointName  string `csv:"Endpoint Name"`
	EndpointFQDN  string `csv:"Endpoint FQDN"`
	Status        string `csv:"Status"`
	MalwareName   string `csv:"Malware name"`
	ThreatType    string `csv:"Threat Type"`
	User          string `csv:"User"`
	FilePath      string `csv:"File Path"`
	SHA256Hash    string `csv:"SHA256 Hash"`
	LastDetection string `csv:"Last Detection"`
}

func ParsingMalware(c *client.Client) (*[]Malware, error) {

	malwareStatusReportID, err := c.GetReportsListMalwareStatus()
	if err != nil {
		return nil, err
	}
	if err := c.DownloadReports(malwareStatusReportID); err != nil {
		return nil, err
	}

	zipFileName := fmt.Sprintf(`./temp/%s.zip`, malwareStatusReportID)
	// Read the zip file
	zipFile, err := zip.OpenReader(zipFileName)
	if err != nil {
		return nil, err
	}
	defer zipFile.Close()
	for _, f := range zipFile.File {
		// Check if the file is a CSV file
		if !strings.HasSuffix(f.Name, ".csv") {
			continue
		}
		// Open the CSV file
		csvFile, err := f.Open()
		if err != nil {
			log.Fatal().Err(err)
		}
		gocsv.SetCSVReader(func(in io.Reader) gocsv.CSVReader {
			r := csv.NewReader(in)
			r.LazyQuotes = true
			return r // Allows use dot as delimiter and use quotes in CSV
		})
		var records []Malware

		defer csvFile.Close()
		if err := gocsv.Unmarshal(csvFile, &records); err != nil {
			log.Printf("Error reading CSV from %s: %v", f.Name, err)
			continue // Skip to the next file on error
		}
		// Print the CSV content
		fmt.Printf("Content of %s:\n", f.Name)
		for _, record := range records {
			if record.Status == "Deleted" {
				fmt.Printf("%+v\n", record)
			}
		}
	}
	return nil, nil
}
