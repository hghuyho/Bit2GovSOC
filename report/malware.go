package report

import (
	"Bit2GovSOC/client"
	"archive/zip"
	"fmt"
	"github.com/dimchansky/utfbom"
	"github.com/gocarina/gocsv"
	"github.com/rs/zerolog/log"
	"io"
	"strings"
)

type Malware struct {
	EndpointName  string `csv:"Endpoint Name"`
	EndpointFQDN  string `csv:"Endpoint FQDN"`
	Status        string `csv:"Status"`
	MalwareName   string `csv:"Malware name"`
	ThreatType    string `csv:"Threat Type"`
	User          string `csv:"User"`
	FilePath      string `csv:"File Path"`
	SHA256Hash    string `csv:"SHA256 Hash"`
	LastDetection string `csv:"Last Detection"`
}

func ParsingMalware(c *client.Client) ([]Malware, error) {
	var records []Malware
	malwareStatusReportID, err := c.GetReportsListMalwareStatus()
	if err != nil {
		return nil, err
	}
	if err := c.DownloadReports(malwareStatusReportID); err != nil {
		return nil, err
	}

	zipFileName := fmt.Sprintf(`./temp/%s.zip`, malwareStatusReportID)
	// Read the zip file
	zipFile, err := zip.OpenReader(zipFileName)
	if err != nil {
		return nil, err
	}
	defer zipFile.Close()
	for _, f := range zipFile.File {
		// Check if the file is a CSV file
		if !strings.HasSuffix(f.Name, ".csv") {
			continue
		}
		// Open the CSV file
		csvFile, err := f.Open()
		if err != nil {
			log.Fatal().Err(err)
		}
		gocsv.SetCSVReader(func(in io.Reader) gocsv.CSVReader {
			return gocsv.LazyCSVReader(in)
		})

		defer csvFile.Close()
		if err := gocsv.UnmarshalWithoutHeaders(utfbom.SkipOnly(csvFile), &records); err != nil {
			log.Printf("Error reading CSV from %s: %v", f.Name, err)
			continue // Skip to the next file on error
		}
	}
	// Filter records where Status is "Deleted"
	var filteredRecords []Malware
	for _, record := range records {
		if record.Status == "Deleted" || record.Status == "Quarantined" || record.Status == "Cleaned" {
			filteredRecords = append(filteredRecords, record)
		}
	}

	return filteredRecords, nil
}
